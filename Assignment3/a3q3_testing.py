# Mohamed Bensaleh
# Cmpt 145 Assignment 3 question 3 Testing
# Mob127
# 11254030

import a3q3 as Experiment

# Testing create()
inputs = Experiment.create('sequences1.txt')
output = inputs
expected = ['ATGATGATGGCG', 'GGCATATCCGGATACC', 'TAGCTAGCCCGC']
if Experiment.create('sequences1.txt') != expected:
    print('Error in create(): expected result', expected,
          ' but found ', output, '-- did not create and return a data struture to store file in a list of strings.')
inputs = Experiment.create('sequences2.txt')
output = inputs
expected = ['GACAGGGTACACATGTCTGCCTGGAGGCCAGGGGCTGACCCCTTGACCTTTGCCTGGTACATTCTGCCTTCACTAGCCCTGGCTTTACATCCAGAGTCATCTGTTCCCAGCGCCAGATTGGTCAGCGGTTCCTGAAATCCCCCGAGGTTCCGTGTGGGAGCAGAGGGAGGACTGGCCCATCCAGCCATTATGCAGATGGGCAGACTGAGATCCTAGGAGGAGAGGAGAGAACGAAGGTCCAGGAGAGAGCCAGGATGGGGCCTCGGGGCT', 'TTCTTCACCAATCCAAATTTGATTCTTGTGTGGCTTGTGGGGAATA', 'CTGAAGAATATCCCCAATCCTGTTCGCCATTACCCCAAAACACACACAGGGACAAAACGGGACATCACTAGATTCTCCCCCTCCCCCCGCCAACTCCATCGGACTCCAGGGCCCTGCCAGGCCTGAGGGACCCCAGATTAGCCTTACCGCCGTGCCCCAACTCAATCAACAGGCCTCCGGTACTTGCACAG', 'GTCTTAAACAGAGTCCTTTTCCCCCCTCATCAGCCTAACCTGGCCCTGGGCTCAGAGCAGAGCTGCCCAAGACACTAAGCAGTTAGGAAATGC', 'TCAAATTAAAAATATTAGTAAATTCTTTTTGTAATGTTGATT', 'GGTTGGAGCTGAAGCCTAAAGCATGACTTTTAGCTGGTGCAGGAGTGGCTTCCTTCTGTCTCCCACTACAATTCAGAGGATACTCAGGGAAAGATCTGGACATCCTGTATGTGGAAAGGCGGTTGCGCACAGTGGAATGGACTCCTAAGTGGCAGGCAGGTGACAACCGTTGTCTACTTC', 'ATTGCAGCTGTGATGTGAGGCCAACCAGGAGCGAATTTGGGGGAGGCTGTGTCTCCTATAGAACGGATGGCTGGGTGGGAGCGCGTGTTAGCGCCAGATGACGGCAGGGCCCTGTAGGGAGAGGACAGAGAAGTGATAGGGCAAGGAGGAAAGGGAACTC', 'CAGCTGGGCCAGGAGCAGGAGACAGGCTGGTTCAAGGAGCTGGAGGAACAGAGGACACTTCTGAACCAGCAGAGCAATCACACAACAGCA', 'CCCAAACACTAAATCCGGGTTAATAGTCTTTCATGGAGGCTTTTCCATTGAAGGAAATCATAGGCCATATATGGGGTGAATAACCTCTTCATCTGATGGAAAAACTCTGGTTATTTTTTTAATTTATACAAGACAGCCAATTTTGGAATTAATGAGTGAAACAGACAATTATAACTTTTGAATAACAGTTTATTAGGAGGTTAACAAAGGATTTCTATTGCATCTCCAAAGACCAAGAGTGACAAGGAAGATTTGCTCCAATTATGTTCTGTTTCATAGCATGCCCATCAGCTCTATCACATTTAATGGAATTTTCTCTAAATTGTATTATTTAAGTTTTATTCAAGTATAACATGTTATGCAAATGTGTCTTTATGGTGATAGATATTGCTTGATCTTGATCCTGCTGTAGGTCTCTCTATGTGACTCAGAAGACAGATTTTGCAGCCT', 'AATGTTCCGGGGAAAATGGGTCTCTGAGCTGCAATAAGAGAAATGTGAGTTAGATCCAAGAAAGTACATAGTAAC', 'CATGGGTCACTATGAGAGCCTTCTGATTTGTTCCCTTGCCTCAGTCTCTCCCCACC', 'CTCCATTGGCTTCCTGGGGCCCCTGGCTTCTTATTCACTAAAGAGAATTGTTCTCAGTGACTGACAAGGCTAAATGAAGACAGGGTGCTCTCTCATTAAATGCAACTGCTCTTTAAGAGGCAGGCAGGGCCATGGACAAGTTATGAGATTTTTGGTCAGTGTTTTTACCAAGAAAACTTGATCTGCCATAAAATCTCAAACAAGTGAAGAAAAGGAATGCAGAGATGCAGGGCCTTTTCTCCACATTCAAAAGACCAAAGTTGGCATGTT', 'GATAGGCGAGAGTGAAGGTCACCTCGGGGCTGTCCATCGCG', 'TTGGTATACTATATCCAGAGACCACAGGGGGCTCGCTCTGCGATTTATGGTGCGAGGAGGACCAGACACCCCCTGTGCCCGTCCTACTCCTGCAGATCAAACTCACAGCCACACTTTTCGGAATGAGAAACTGGACAGTAAATGAACGCAAGAACCATGGTGCCCAGGCAGAGAACCCCGCTGGGTTTGCTACGAAGGTTGCGGTGGAGGCGCCC', 'ATAGTATATTATAGATAGATATAGAGTTATCATTCAAA', 'CTTAAAAGGAGGCTGGGTTGGCCCAAGGTACTCAAATGAAGACTTTGGGAACTGTGGGAGGGTGGGTGGAGTGTGTAGGCAGTGGGCCAGGGGACCAGGGTTTCATTTTTGTTGAACGATGAGGATTCCCCTTAGTCTTTTAGGGGCCTTGAACTGACAGGAACTGAAAACCTCTTTAAATAGCATTTGCCACACTTCATCCCATTTCTTATTTAATGTTTTCGTAACTTCTCTAGGCAGCCAAGCAGCTTAAGGGATTCTGGTTTGAGGTTCTCCTGTGTGGATGGGCTTTGCCTGTTTCCAGGTAGGGCCCGGGCAGAGGCCTAGAGTATCCTTCATTCCCTCAAGCCCTTGCACGCTGACCTGGGTGCTGCTGCTGGAGGTATCCTCAAGCTAACGGGCATTGAGCTTTGCTGCAGAGAAGGCAGCCTGCCTTGGGCTCCCTGAGTCTAGGGTGTGCCCAGGCATCCCTGGCTTTCTGTCACCTTTTCTTTCTTTTTTTCACCTTCCAAACT', 'AGGGTTCTGGGAGCTGGGGTGAGACAGAAAGTGTCCTTTATCCCCAGGGGAACGCCTGTCCTAGCATCTCACAGGCCTAGCCTAGACTCACTGGCAGAGTTTTGCTATAGTTTTGCCTAAGGTGTGGCAGACACTTTGCTAATATCACTTTGTTCAGGCCTCACCTCAATCTGGCAGCAGAAGGGCACAAAGCAGCTGCCAAGAACTGAGAGGA', 'AAATTGTTTAGATTATATAACTCGTCTCTTTAGAATGGTATTTGCTGTCCTTCATGAAGTCC', 'TACTGCAAAATGTTAATATTTTTAATGTCATTATTTACAATATTAAGGTAAAAGAAAAACTTGCAGTCTTTAAAATCTAACAACATAGGTTTTGTGAATGACACAGTTCTCTATAAAAGTATTGTAGCTTTGGAGTTATCCCCATACTCCTGGTTATTACACAACTGTGTAACCCATGGCTTTTCTGAACTTTAATCTCCAGCCTCCTTACACAGGTGCATAAGATGGCTCCAGTACTTCATAAACTAAAGCAAGGGCGAATTAAGATATGGCCTGATGCTCTCTAGGGAGATGTTCTAAGGAGGGATAAAGAAGACTGGGCATGGCGAACTGTAGCCCACCCAGAGTGCTGAATCTGTGACAGTGAAATAAACCTACACTTCAGAAAGTGCTCTGAGAACCTAACATAACTCATCCCTCTATCCTTTGTAAGTAGCAACCTGGAAGGCAGCATCAGGCAGAGTTTTTTAATTAGACAGCTATGTATTTTGTCAGAAAATTTACTAAGCAGTTGGCTAAAAGAATGATTATCTCGAGCTGCACTAACTCTGATTAGTATCCATTAAACATCTATGGTTTTGGAGAAACCTCAAAGATAGCCAGCTATGTGCCAAAGAACAGACCAATGGCTATCAATACCACAAAGTTAGCACAAATATAAACCGCATAGTTTGTAGGAAAAGTTTATTTAATGGGGAGACTAAGACGATGCAAGATG', 'ATTAAGTCCATGATTTACCCTGCCTTCAAGGTCAATACTGTTCTTTGTATTCATATGAATAACATACCTGCTGGGGCCAGGATTAAAATGTCATCTAACAAGTTTTTTCTATTCTGGTGAGCTTTCTTTTGTCTAGATTACATCAATCATAAGGGAGAGAAAA', 'TTTCCTCTCATTTCA', 'TAAGGTAAAACAAATAACCATTCTTTGTCTCATAAATAATT', 'GAATGTTTTGTTTTTTAAGAT', 'TTTTTCTTTATCAAGGCTCAACTGTTTTCGAAGTCTTCAGGCTTGAAGTTCTGGAGAAAACAACTAGGCTCTCCGGGCGAGATCCCGAATACCAGTTTAAGGGATTTGAAATGCAAGGCCGTCTGGGACTCCACTGCCACGGATGGGCACCAGGCGGCGCCGGTCGGATCCGTCCCGGGACTAGCAGGGCTTTGGGCAGCAACCCGCAGGGAGCCCGACCGCCTCTGGCCAGGTCCGGGCAGCTGGTGGGGGAGGTTCCAGAGGTCCACGCCATTCGTGGACGCAGTCTCTAGTGTCCTCTCCGCGTCCCACTTCACTGCCCCATCCCCTTTCCTGCGAGAGCCTGGACTTGGAAGGCACCTGGGAGGGTGTAAGCGCCTTGGTGTGTGCCCATCTGGGTCCCCAGAAGAGCGGCGGGAACTGCGGCCGCCCGGACGGTGCGGCCAGACTCCAGTGTGGAAGGGGAGGCAGCTGTTCTCCCAGGCGGCCGTGGGGGGCAGCAGAGGGGACGGCGACAGGTGCGGGAGCCCCTCCCGGGGTAGAAGTGGAAAGGCGGGCTCCGGGGTCTGTTCCCAGGCTGGAAACCACCCCCGCCCCCCATCCAAATCCCCGGGAGAGGCCCGGCCGGCGCCGGGTCTGGAGGAGGAAGCGGCCAGAGACAGTGCAATTTCACGCGGTCTCTGTGGCTCGGGTTCCTGGGCTGGGTGGATGAATTATGGGGTTTCGAGTCTGGGAGAAACTGAGGTGGCCTGGACGTGAGGCAAAAAACACCCTCCCCCTCAAAAACACACAGAGAGAAATATTCACATTCTGAGAGAAAATCCACCAAGTGAACCAACCGGCTAGGGGAGTTGAGTGATTT', 'TGCCTCGCATGCCAGCGCCCCATAGGGCATCCGTGCCTCAGTTCACCTCTTGCCATCCTCCAAGGACGGGGAGAAGGGGTAAGGCGGGGGAGAGCAAGGTGGCTTGGTCGCCCCCGGCCCCCGCCCCCCATGTTGTGTGCAGTTTCCACCACGTCTGTTTCGGAGGGAGAAGAGGAGGGTGCAGATGAGGCGAGGCGCCTTCGGGAGCGCGGAGAGCGGGCAGGCAGTGCCACCTGCTGAGAGCCACTCAGGCCGAGCAAGCGGCGGGCAGTGCCACCTGCTATAAATAGGCCGCCAAGGACAGGGTGTGCGACTGTACATCCCGCCACGAGGGCCTGCATCACGCGCGGGGCCCCGCGCCCCCGGCTCCCCAGGGAAACGCTGTGCCC', 'CGCCTTTTAGAACGTGAGCGGGTTGGCCCTACAGGGATTTCTCCTCGCCCCCGTCAGTTTATTCCCCACCCCACCCTCCGTTCCCCTTTCTTGGAGTGTGAACCACCTCTCCCTTCTTGGGACGCTTAGGGACCGTTCCATTCA']
if Experiment.create('sequences2.txt') != expected:
    print('Error in create(): expected result', expected,
          ' but found ', output, '-- did not create and return a data struture to store file in a list of strings.')


# Testing numSequences()
inputs = Experiment.create('sequences1.txt')
output = Experiment.numSequences(inputs)
expected = 3
if Experiment.numSequences(inputs) != expected:
    print('Error in numSequences(): expected result', expected,
          ' but found ', output, '-- did not find the correct number of sequences.')
inputs = Experiment.create('sequences2.txt')
output = Experiment.numSequences(inputs)
expected = 26
if Experiment.numSequences(inputs) != expected:
    print('Error in numSequences(): expected result', expected,
          ' but found ', output, '-- did not find the correct number of sequences.')


# Testing display()
inputs = Experiment.create('sequences1.txt')
output = Experiment.display(inputs)
expected = 'ATGATGATGGCG'
if Experiment.display(inputs) != expected:
    print('Error in display(): expected result', expected,
          ' but found ', output, '-- did not find correct string from data stored')
inputs = Experiment.create('sequences2.txt')
output = Experiment.display(inputs)
expected = 'GACAGGGTACACATGTCTGCCTGGAGGCCAGGGGCTGACCCCTTGACCTTTGCCTGGTACATTCTGCCTTCACTAGCCCTGGCTTTACATCCAGAGTCATCTGTTCCCAGCGCCAGATTGGTCAGCGGTTCCTGAAATCCCCCGAGGTTCCGTGTGGGAGCAGAGGGAGGACTGGCCCATCCAGCCATTATGCAGATGGGCAGACTGAGATCCTAGGAGGAGAGGAGAGAACGAAGGTCCAGGAGAGAGCCAGGATGGGGCCTCGGGGCT'
if Experiment.display(inputs) != expected:
    print('Error in display(): expected result', expected,
          ' but found ', output, '-- did not find correct string from data stored')


# Testing averageLength()
inputs = Experiment.create('sequences1.txt')
output = Experiment.averageLength(inputs)
expected = 13
if Experiment.averageLength(inputs) != expected:
    print('Error in averageLength(): expected result', expected,
          ' but found ', output, '-- did not find the correct average length of sequences.')
inputs = Experiment.create('sequences2.txt')
output = Experiment.averageLength(inputs)
expected = 206
if Experiment.averageLength(inputs) != expected:
    print('Error in averageLength(): expected result', expected,
          ' but found ', output, '-- did not find the correct average length of sequences.')


# Testing averageGCcontent
inputs = Experiment.create('sequences1.txt')
output = Experiment.averageGCcontent(inputs)
expected = 57.5
if abs(Experiment.averageGCcontent(inputs) - expected) > 0.00001:
    print('Error in averageGCcontent(): expected result', expected,
          ' but found ', output, '-- did not find the correct average GC content sequences.')
inputs = Experiment.create('sequences2.txt')
output = Experiment.averageGCcontent(inputs)
expected = 50.06528
if abs(Experiment.averageGCcontent(inputs) - expected) > 0.00001:
    print('Error in averageGCcontent(): expected result', expected,
          ' but found ', output, '-- did not find the correct average GC content sequences.')

# Testing remobeLowQuality()
inputs = Experiment.create('sequences1.txt')
output = Experiment.removeLowQuality(inputs,55, 65)
expected = 1
if Experiment.numSequences(inputs) != expected:
    print('Error in removeLowQuality(): expected result', expected,
          ' but found ', output, '-- did not remove the correct or right amount of sequences below minimum cut off and above max cut off.')
inputs = Experiment.create('sequences2.txt')
output = Experiment.removeLowQuality(inputs,55, 65)
expected = 13
if Experiment.numSequences(inputs) != expected:
    print('Error in removeLowQuality(): expected result', expected,
          ' but found ', output, '-- did not remove the correct or right amount of sequences below minimum cut off and above max cut off.')

print('*** Test script completed ***')









