Cmpt 145Mohamed BensalehMob12711254030Activity References 1: There is only one list which has two variables referring to that same value so the answer is yes, the change on line 5 affects x as well. The reference stored with y is the address of the list value.Activity References 2: Line 3 created a copy of the list, and the assignment statement on line 5 changes the copy, but not the original. Similar to how == does not mean the 2 variables refer to the same object or are at the same address, one could just be a copy of the other.Acitivity References 3: No it does not affect z because python lists store references to values, x has the values 1,2,3 and they are all stored within their addresses which is their index in the list, same thing with y. z refers to these original addresses since it is x + y that makes z.Activity References 4: Yes it does affect z because a list of lists is actually a list of addresses or references,  these addresses refer to other lists with addresses that are their index which we assign to new values on line 7-8 with the same address.Activity References 5: It assigns the first index in the list to be 10 since that index is the address the value 10 is assigned to, that is the only place it will end up.Activity  References 6: On line 5 variable x refers to the address  which is the index [0][0].  It assigns 10 to the first index 3 times since it is now a list of list  or list of addresses.Activity reference 7: Line 10 reassigns b as the global value of ‘a’ which is 5 and puts it through the function change_params which makes it 4 and assigns it as the new global value of b.Activity reference 8: when the arguments 3 and 4 were passed through the function, in the function, yes they were swapped. Inside the function x which is 3 refers to the same address for y which is 4. Y which is 4 refers to the address that holds the variable tmp and tmp refers to the address that holds x which is 3  so that would swap the values for x and y making  x = 4 and y = 3.